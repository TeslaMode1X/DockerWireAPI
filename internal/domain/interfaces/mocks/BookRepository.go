// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	books "github.com/TeslaMode1X/DockerWireAPI/internal/domain/models/books"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/gofrs/uuid"
)

// BookRepository is an autogenerated mock type for the BookRepository type
type BookRepository struct {
	mock.Mock
}

// CreateBook provides a mock function with given fields: ctx, book
func (_m *BookRepository) CreateBook(ctx context.Context, book books.Book) (uuid.UUID, error) {
	ret := _m.Called(ctx, book)

	if len(ret) == 0 {
		panic("no return value specified for CreateBook")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, books.Book) (uuid.UUID, error)); ok {
		return rf(ctx, book)
	}
	if rf, ok := ret.Get(0).(func(context.Context, books.Book) uuid.UUID); ok {
		r0 = rf(ctx, book)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, books.Book) error); ok {
		r1 = rf(ctx, book)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBookById provides a mock function with given fields: ctx, id
func (_m *BookRepository) DeleteBookById(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBookById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllBooks provides a mock function with given fields: ctx
func (_m *BookRepository) GetAllBooks(ctx context.Context) (*[]books.Book, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllBooks")
	}

	var r0 *[]books.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*[]books.Book, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *[]books.Book); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]books.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBookById provides a mock function with given fields: ctx, bookId
func (_m *BookRepository) GetBookById(ctx context.Context, bookId uuid.UUID) (*books.Book, error) {
	ret := _m.Called(ctx, bookId)

	if len(ret) == 0 {
		panic("no return value specified for GetBookById")
	}

	var r0 *books.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*books.Book, error)); ok {
		return rf(ctx, bookId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *books.Book); ok {
		r0 = rf(ctx, bookId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*books.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, bookId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IfBookExists provides a mock function with given fields: ctx, bookId
func (_m *BookRepository) IfBookExists(ctx context.Context, bookId uuid.UUID) (bool, error) {
	ret := _m.Called(ctx, bookId)

	if len(ret) == 0 {
		panic("no return value specified for IfBookExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (bool, error)); ok {
		return rf(ctx, bookId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) bool); ok {
		r0 = rf(ctx, bookId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, bookId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBookById provides a mock function with given fields: ctx, book, bookId
func (_m *BookRepository) UpdateBookById(ctx context.Context, book books.Book, bookId uuid.UUID) (uuid.UUID, error) {
	ret := _m.Called(ctx, book, bookId)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBookById")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, books.Book, uuid.UUID) (uuid.UUID, error)); ok {
		return rf(ctx, book, bookId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, books.Book, uuid.UUID) uuid.UUID); ok {
		r0 = rf(ctx, book, bookId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, books.Book, uuid.UUID) error); ok {
		r1 = rf(ctx, book, bookId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBookRepository creates a new instance of BookRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBookRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *BookRepository {
	mock := &BookRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
