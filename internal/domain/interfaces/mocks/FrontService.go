// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	books "github.com/TeslaMode1X/DockerWireAPI/internal/domain/models/books"

	http "net/http"

	mainPageParams "github.com/TeslaMode1X/DockerWireAPI/internal/domain/models/mainPageParams"

	mock "github.com/stretchr/testify/mock"

	orderItem "github.com/TeslaMode1X/DockerWireAPI/internal/domain/models/orderItem"

	url "net/url"

	uuid "github.com/gofrs/uuid"
)

// FrontService is an autogenerated mock type for the FrontService type
type FrontService struct {
	mock.Mock
}

// AddCartItems provides a mock function with given fields: ctx, userID, items
func (_m *FrontService) AddCartItems(ctx context.Context, userID string, items *[]orderItem.OrderItem) error {
	ret := _m.Called(ctx, userID, items)

	if len(ret) == 0 {
		panic("no return value specified for AddCartItems")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *[]orderItem.OrderItem) error); ok {
		r0 = rf(ctx, userID, items)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AdminPage provides a mock function with given fields: ctx, params
func (_m *FrontService) AdminPage(ctx context.Context, params mainPageParams.Model) (string, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for AdminPage")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, mainPageParams.Model) (string, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, mainPageParams.Model) string); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, mainPageParams.Model) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBook provides a mock function with given fields: ctx, bookID
func (_m *FrontService) DeleteBook(ctx context.Context, bookID string) error {
	ret := _m.Called(ctx, bookID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, bookID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditBook provides a mock function with given fields: ctx, bookID, book
func (_m *FrontService) EditBook(ctx context.Context, bookID string, book *books.Book) error {
	ret := _m.Called(ctx, bookID, book)

	if len(ret) == 0 {
		panic("no return value specified for EditBook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *books.Book) error); ok {
		r0 = rf(ctx, bookID, book)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCartItems provides a mock function with given fields: ctx, userId
func (_m *FrontService) GetCartItems(ctx context.Context, userId string) (*[]orderItem.OrderItemFull, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetCartItems")
	}

	var r0 *[]orderItem.OrderItemFull
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*[]orderItem.OrderItemFull, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *[]orderItem.OrderItemFull); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]orderItem.OrderItemFull)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginPage provides a mock function with given fields: ctx, page, errorMessage, successMessage
func (_m *FrontService) LoginPage(ctx context.Context, page string, errorMessage string, successMessage string) (string, error) {
	ret := _m.Called(ctx, page, errorMessage, successMessage)

	if len(ret) == 0 {
		panic("no return value specified for LoginPage")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (string, error)); ok {
		return rf(ctx, page, errorMessage, successMessage)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) string); ok {
		r0 = rf(ctx, page, errorMessage, successMessage)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, page, errorMessage, successMessage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MainPage provides a mock function with given fields: ctx, model
func (_m *FrontService) MainPage(ctx context.Context, model mainPageParams.Model) (string, error) {
	ret := _m.Called(ctx, model)

	if len(ret) == 0 {
		panic("no return value specified for MainPage")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, mainPageParams.Model) (string, error)); ok {
		return rf(ctx, model)
	}
	if rf, ok := ret.Get(0).(func(context.Context, mainPageParams.Model) string); ok {
		r0 = rf(ctx, model)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, mainPageParams.Model) error); ok {
		r1 = rf(ctx, model)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessLogin provides a mock function with given fields: ctx, w, r, form
func (_m *FrontService) ProcessLogin(ctx context.Context, w http.ResponseWriter, r *http.Request, form url.Values) error {
	ret := _m.Called(ctx, w, r, form)

	if len(ret) == 0 {
		panic("no return value specified for ProcessLogin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, http.ResponseWriter, *http.Request, url.Values) error); ok {
		r0 = rf(ctx, w, r, form)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProcessRegistration provides a mock function with given fields: ctx, form
func (_m *FrontService) ProcessRegistration(ctx context.Context, form url.Values) error {
	ret := _m.Called(ctx, form)

	if len(ret) == 0 {
		panic("no return value specified for ProcessRegistration")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, url.Values) error); ok {
		r0 = rf(ctx, form)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegistrationPage provides a mock function with given fields: ctx, page, errorMessage, successMessage
func (_m *FrontService) RegistrationPage(ctx context.Context, page string, errorMessage string, successMessage string) (string, error) {
	ret := _m.Called(ctx, page, errorMessage, successMessage)

	if len(ret) == 0 {
		panic("no return value specified for RegistrationPage")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (string, error)); ok {
		return rf(ctx, page, errorMessage, successMessage)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) string); ok {
		r0 = rf(ctx, page, errorMessage, successMessage)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, page, errorMessage, successMessage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveCartItem provides a mock function with given fields: ctx, userID, bookID
func (_m *FrontService) RemoveCartItem(ctx context.Context, userID string, bookID uuid.UUID) error {
	ret := _m.Called(ctx, userID, bookID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveCartItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uuid.UUID) error); ok {
		r0 = rf(ctx, userID, bookID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewFrontService creates a new instance of FrontService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFrontService(t interface {
	mock.TestingT
	Cleanup(func())
}) *FrontService {
	mock := &FrontService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
