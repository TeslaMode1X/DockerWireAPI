// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	order "github.com/TeslaMode1X/DockerWireAPI/internal/domain/models/order"

	orderItem "github.com/TeslaMode1X/DockerWireAPI/internal/domain/models/orderItem"
)

// OrderService is an autogenerated mock type for the OrderService type
type OrderService struct {
	mock.Mock
}

// AddOrderItemIntoOrder provides a mock function with given fields: ctx, userID, bookIDs
func (_m *OrderService) AddOrderItemIntoOrder(ctx context.Context, userID string, bookIDs *[]orderItem.OrderItem) error {
	ret := _m.Called(ctx, userID, bookIDs)

	if len(ret) == 0 {
		panic("no return value specified for AddOrderItemIntoOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *[]orderItem.OrderItem) error); ok {
		r0 = rf(ctx, userID, bookIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AlterUserOrder provides a mock function with given fields: ctx, userID
func (_m *OrderService) AlterUserOrder(ctx context.Context, userID string) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for AlterUserOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AlterUserOrderByID provides a mock function with given fields: ctx, userID, orderID
func (_m *OrderService) AlterUserOrderByID(ctx context.Context, userID string, orderID string) error {
	ret := _m.Called(ctx, userID, orderID)

	if len(ret) == 0 {
		panic("no return value specified for AlterUserOrderByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, orderID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUserOrder provides a mock function with given fields: ctx, userID
func (_m *OrderService) CreateUserOrder(ctx context.Context, userID string) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserOrderByUserID provides a mock function with given fields: ctx, orderId
func (_m *OrderService) GetUserOrderByUserID(ctx context.Context, orderId string) (*order.Model, error) {
	ret := _m.Called(ctx, orderId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserOrderByUserID")
	}

	var r0 *order.Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*order.Model, error)); ok {
		return rf(ctx, orderId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *order.Model); ok {
		r0 = rf(ctx, orderId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsersOrder provides a mock function with given fields: ctx, userId
func (_m *OrderService) GetUsersOrder(ctx context.Context, userId string) (*order.Model, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetUsersOrder")
	}

	var r0 *order.Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*order.Model, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *order.Model); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOrderService creates a new instance of OrderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderService(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderService {
	mock := &OrderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
